apiVersion: fogapps.k8s.rainbow-h2020.eu/v1
kind: ServiceGraph
metadata:
  name: appevalhrc-inst1-jijqqbzv0a
  namespace: appevalhrc-inst1-jijqqbzv0a
spec:
  dnsConfig:
    dnsPolicy: None
    nameservers:
    - fc8a:194b:8329:2583:7271:ffcd:eb8e:dd49
  links:
  - source: inst1-hrcmetricmonitor355-tcjjy342ut
    target: inst1-rabbitmq311-zreg6dju5r
  - source: inst1-hrcmetricmonitor355-tcjjy342ut
    target: inst1-redis333-5vbuk3r039
  - source: inst1-robotmotiontracker436-rngjm8r99g
    target: inst1-rabbitmq311-zreg6dju5r
  - source: inst1-robotmotiontracker436-rngjm8r99g
    target: inst1-redis333-5vbuk3r039
  - source: inst1-collisionpredictionavoidance344-cihbqq65k6
    target: inst1-rabbitmq311-zreg6dju5r
  - source: inst1-collisionpredictionavoidance344-cihbqq65k6
    target: inst1-redis333-5vbuk3r039
  - source: inst1-personnellocationmotioncapturing322-n89zmiudce
    target: inst1-rabbitmq311-zreg6dju5r
  - source: inst1-personnellocationmotioncapturing322-n89zmiudce
    target: inst1-redis333-5vbuk3r039
  nodes:
  - containers:
    - env:
      - name: RABBITMQ
        value: inst1-rabbitmq311-zreg6dju5r.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      - name: REDIS_PASSWORD
        value: rabbit
      - name: RABBITMQ_PASSWORD
        value: rabbit
      - name: RABBITMQ_USERNAME
        value: admin
      - name: REDIS
        value: inst1-redis333-5vbuk3r039.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      image: virtualorigami/pycollisionavoidance:stateless
      name: inst1-collisionpredictionavoidance344-cihbqq65k6
      ports:
      - containerPort: 6379
        name: cparedis1450
        protocol: TCP
      - containerPort: 5672
        name: cparabbitm1451
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 2048Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: cparedis1450
        port: 6379
        protocol: TCP
      - name: cparabbitm1451
        port: 5672
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets: []
    labels:
      app.kubernetes.io/component: inst1-collisionpredictionavoidance344-cihbqq65k6
      app.kubernetes.io/instance: inst1-collisionpredictionavoidance344-cihbqq65k6
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-collisionpredictionavoidance344-cihbqq65k6
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
    slos:
    - name: collisionpredictionavoidance-message-processing
      sloType:
        apiVersion: slo.k8s.rainbow-h2020.eu/v1
        kind: CustomStreamSightSloMapping
      elasticityStrategy:
        apiVersion: elasticity.polaris-slo-cloud.github.io/v1
        kind: HorizontalElasticityStrategy
      sloConfig:
        # Defines the StreamSight streams that should be available for the insights.
        #
        # Each key in this object defines the name of the stream and its value is the definition of the stream.
        # Within each stream definition, there are two placeholders that will be filled in by the SLO controller:
        # - `${namespace}`: The namespace, where the SloMapping is deployed.
        # - `${podName}`: A wildcard expression with the prefix of the pod names.
        streams:
          pod_cpu: 'stream from storageLayer(periodicity=1000, metricID="cpu", entityType="POD", namespace="${namespace}", name="${podName}" );'
          mq_publish: 'stream from storageLayer(periodicity=1000, metricID="rmt_robot_rk_publish");'
          mq_delivery: 'stream from storageLayer(periodicity=1000, metricID="rmt_robot_rk_delivery");'

        # Defines the insights that can be used in the `targetState` below.
        # Each key in this object defines the name of an insight and its value specifies the query for it.
        insights:
          # Average CPU usage across all pods.
          avg_pod_cpu: 'COMPUTE avg("cpu" FROM (pod_cpu), 10s) EVERY 10s;'
          # MQ delay rate = mq_publish / mq_delivery, i.e., a value of 100 is perfect, above 100 we are accumulating messages and need to scale out, below 100 we are faster than required and may scale in.
          mq_delay_rate: 'COMPUTE (max("rmt_robot_rk_publish" FROM (mq_publish), 10s) / max("rmt_robot_rk_delivery" FROM (mq_delivery), 10s)) * 100 EVERY 10s;'

        # Defines the target state for the `insights`, i.e., the state in which the SLO should keep them, in Conjunctive Normal Form (CNF).
        targetState:
          # The disjunction clauses, which are evaluated and combined with an AND operator.
          conjuncts:
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: mq_delay_rate # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 100
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: avg_pod_cpu # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 50
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false

        # Specifies the tolerance around 100%, within which no scaling will be performed.
        # For example, if tolerance is `10`, no scaling will be performed as long as the SloCompliance is between `90` and `110`.
        elasticityStrategyTolerance: 10

      # Optional configuration of the stabilization window, within which the elasticity strategy will not be executed twice.
      stabilizationWindow:
        scaleUpSeconds: 10
        scaleDownSeconds: 60

  - containers:
    - env:
      - name: RABBITMQ
        value: inst1-rabbitmq311-zreg6dju5r.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      - name: REDIS_PASSWORD
        value: rabbit
      - name: RABBITMQ_PASSWORD
        value: rabbit
      - name: RAINBOW_AGENT_HOST
        value: 192.168.83.13
      - name: RABBITMQ_USERNAME
        value: admin
      - name: REDIS
        value: inst1-redis333-5vbuk3r039.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      image: virtualorigami/rabbit-redis-monitoring:stateless
      name: inst1-hrcmetricmonitor355-tcjjy342ut
      ports:
      - containerPort: 6379
        name: redismetri1448
        protocol: TCP
      - containerPort: 15672
        name: rabbitmqbr1449
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 2048Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: redismetri1448
        port: 6379
        protocol: TCP
      - name: rabbitmqbr1449
        port: 15672
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets: []
    labels:
      app.kubernetes.io/component: inst1-hrcmetricmonitor355-tcjjy342ut
      app.kubernetes.io/instance: inst1-hrcmetricmonitor355-tcjjy342ut
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-hrcmetricmonitor355-tcjjy342ut
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
  - containers:
    - env:
      - name: RABBITMQ
        value: inst1-rabbitmq311-zreg6dju5r.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      - name: REDIS_PASSWORD
        value: rabbit
      - name: RABBITMQ_PASSWORD
        value: rabbit
      - name: RABBITMQ_USERNAME
        value: admin
      - name: REDIS
        value: inst1-redis333-5vbuk3r039.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      image: virtualorigami/pypersonnelloc:stateless
      name: inst1-personnellocationmotioncapturing322-n89zmiudce
      ports:
      - containerPort: 5672
        name: plmcrabbit1452
        protocol: TCP
      - containerPort: 6379
        name: plmcrediss1453
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 2048Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: plmcrabbit1452
        port: 5672
        protocol: TCP
      - name: plmcrediss1453
        port: 6379
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets: []
    labels:
      app.kubernetes.io/component: inst1-personnellocationmotioncapturing322-n89zmiudce
      app.kubernetes.io/instance: inst1-personnellocationmotioncapturing322-n89zmiudce
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-personnellocationmotioncapturing322-n89zmiudce
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
    slos:
    - name: personnellocationmotioncapturing-message-processing
      sloType:
        apiVersion: slo.k8s.rainbow-h2020.eu/v1
        kind: CustomStreamSightSloMapping
      elasticityStrategy:
        apiVersion: elasticity.polaris-slo-cloud.github.io/v1
        kind: HorizontalElasticityStrategy
      sloConfig:
        # Defines the StreamSight streams that should be available for the insights.
        #
        # Each key in this object defines the name of the stream and its value is the definition of the stream.
        # Within each stream definition, there are two placeholders that will be filled in by the SLO controller:
        # - `${namespace}`: The namespace, where the SloMapping is deployed.
        # - `${podName}`: A wildcard expression with the prefix of the pod names.
        streams:
          pod_cpu: 'stream from storageLayer(periodicity=1000, metricID="cpu_ptc", namespace="${namespace}", name="${podName}" );'
          mq_publish: 'stream from storageLayer(periodicity=1000, metricID="generator_personnel_rk_pub_rate");'
          mq_delivery: 'stream from storageLayer(periodicity=1000, metricID="rmt_robot_rk_deliver_rate");'

        # Defines the insights that can be used in the `targetState` below.
        # Each key in this object defines the name of an insight and its value specifies the query for it.
        insights:
          # Average CPU usage across all pods.
          avg_pod_cpu: 'compute (max("cpu_ptc" FROM (pod_cpu), 10s)) EVERY 10 SECONDS;'
          # MQ delay rate = mq_publish / mq_delivery, i.e., a value of 100 is perfect, above 100 we are accumulating messages and need to scale out, below 100 we are faster than required and may scale in.
          mq_delay_rate: 'compute (100.0 * max("generator_personnel_rk_pub_rate" FROM (mq_publish), 10s) / max("rmt_robot_rk_deliver_rate" FROM (mq_delivery), 10s), 10 SECONDS) EVERY 10 SECONDS;'

        # Defines the target state for the `insights`, i.e., the state in which the SLO should keep them, in Conjunctive Normal Form (CNF).
        targetState:
          # The disjunction clauses, which are evaluated and combined with an AND operator.
          conjuncts:
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: mq_delay_rate # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 100
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: avg_pod_cpu # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 50
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false

        # Specifies the tolerance around 100%, within which no scaling will be performed.
        # For example, if tolerance is `10`, no scaling will be performed as long as the SloCompliance is between `90` and `110`.
        elasticityStrategyTolerance: 10

      # Optional configuration of the stabilization window, within which the elasticity strategy will not be executed twice.
      stabilizationWindow:
        scaleUpSeconds: 10
        scaleDownSeconds: 60

  - containers:
    - env:
      - name: RABBITMQ
        value: inst1-rabbitmq311-zreg6dju5r.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      - name: REDIS_PASSWORD
        value: rabbit
      - name: RABBITMQ_PASSWORD
        value: rabbit
      - name: RABBITMQ_USERNAME
        value: admin
      - name: REDIS
        value: inst1-redis333-5vbuk3r039.appevalhrc-inst1-jijqqbzv0a.svc.cluster.local
      image: virtualorigami/pyrobomotra:stateless
      name: inst1-robotmotiontracker436-rngjm8r99g
      ports:
      - containerPort: 5672
        name: rabbitmqrm1446
        protocol: TCP
      - containerPort: 6379
        name: redisrmt1447
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 2048Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: rabbitmqrm1446
        port: 5672
        protocol: TCP
      - name: redisrmt1447
        port: 6379
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets: []
    labels:
      app.kubernetes.io/component: inst1-robotmotiontracker436-rngjm8r99g
      app.kubernetes.io/instance: inst1-robotmotiontracker436-rngjm8r99g
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-robotmotiontracker436-rngjm8r99g
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
    slos:
    - name: robotmotiontracker-message-processing
      sloType:
        apiVersion: slo.k8s.rainbow-h2020.eu/v1
        kind: CustomStreamSightSloMapping
      elasticityStrategy:
        apiVersion: elasticity.polaris-slo-cloud.github.io/v1
        kind: HorizontalElasticityStrategy
      sloConfig:
        # Defines the StreamSight streams that should be available for the insights.
        #
        # Each key in this object defines the name of the stream and its value is the definition of the stream.
        # Within each stream definition, there are two placeholders that will be filled in by the SLO controller:
        # - `${namespace}`: The namespace, where the SloMapping is deployed.
        # - `${podName}`: A wildcard expression with the prefix of the pod names.
        streams:
          pod_cpu: 'stream from storageLayer(periodicity=1000, metricID="cpu", entityType="POD", namespace="${namespace}", name="${podName}" );'
          mq_publish: 'stream from storageLayer(periodicity=1000, metricID="generator_robot_rk_pub_rate");'
          mq_delivery: 'stream from storageLayer(periodicity=1000, metricID="generator_robot_rk_deliver_rate");'

        # Defines the insights that can be used in the `targetState` below.
        # Each key in this object defines the name of an insight and its value specifies the query for it.
        insights:
          # Average CPU usage across all pods.
          avg_pod_cpu: 'COMPUTE avg("cpu" FROM (pod_cpu), 10s) EVERY 10s;'
          # MQ delay rate = mq_publish / mq_delivery, i.e., a value of 100 is perfect, above 100 we are accumulating messages and need to scale out, below 100 we are faster than required and may scale in.
          mq_delay_rate: 'COMPUTE (max("generator_robot_rk_pub_rate" FROM (mq_publish), 10s) / max("generator_robot_rk_deliver_rate" FROM (mq_delivery), 10s)) * 100 EVERY 10s;'

        # Defines the target state for the `insights`, i.e., the state in which the SLO should keep them, in Conjunctive Normal Form (CNF).
        targetState:
          # The disjunction clauses, which are evaluated and combined with an AND operator.
          conjuncts:
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: mq_delay_rate # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 100
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false
            - disjuncts: # The states, which should be evaluated and combined with an OR operator.
                - insight: avg_pod_cpu # The insight, for which the state is defined.
                  # The desired target value for the insight.
                  # By default we assume that a lower metric value is "better", e.g.,
                  # for network latency a lower value is considered better than a higher value.
                  # In this case, the following scaling approach is used:
                  # - Above `targetValue + tolerance` we scale up/out.
                  # - Below `targetValue - tolerance` we scale down/in
                  # This behavior can be inverted by setting the `higherIsBetter` property to `true`.
                  targetValue: 50
                  # A tolerance around the target value.
                  tolerance: 10
                  # (optional) If `true`, then a higher metric value is considered "better" and, thus,
                  # the above/below rules of `targetValue` and `tolerance` are inverted.
                  higherIsBetter: false

        # Specifies the tolerance around 100%, within which no scaling will be performed.
        # For example, if tolerance is `10`, no scaling will be performed as long as the SloCompliance is between `90` and `110`.
        elasticityStrategyTolerance: 10

      # Optional configuration of the stabilization window, within which the elasticity strategy will not be executed twice.
      stabilizationWindow:
        scaleUpSeconds: 10
        scaleDownSeconds: 60

  - containers:
    - env:
      - name: RABBITMQ_DEFAULT_USER
        value: admin
      - name: RABBITMQ_NODENAME
        value: rabbit@localhost
      - name: RABBITMQ_DEFAULT_PASS
        value: rabbit
      image: virtualorigami/rabbitmq:0.9.0
      name: inst1-rabbitmq311-zreg6dju5r
      ports:
      - containerPort: 15672
        name: rabbitmqbr1455
        protocol: TCP
      - containerPort: 5672
        name: rabbitmqbr1456
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 2048Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: rabbitmqbr1455
        port: 15672
        protocol: TCP
      - name: rabbitmqbr1456
        port: 5672
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets: []
    labels:
      app.kubernetes.io/component: inst1-rabbitmq311-zreg6dju5r
      app.kubernetes.io/instance: inst1-rabbitmq311-zreg6dju5r
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-rabbitmq311-zreg6dju5r
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
  - containers:
    - env:
      - name: REDIS_PASSWORD
        value: rabbit
      image: registry.gitlab.com/rainbow-project1/rainbow-integration/arm64v8/redis:6.2.2-alpine
      name: inst1-redis333-5vbuk3r039
      ports:
      - containerPort: 6379
        name: redisserve1454
        protocol: TCP
      resources:
        limits:
          cpu: 1000m
          memory: 1096Mi
      securityContext:
        privileged: false
    exposedPorts:
      hostNetwork: true
      ports:
      - name: redisserve1454
        port: 6379
        protocol: TCP
      type: ClusterInternal
    imagePullSecrets:
    - name: inst1-redis333-5vbuk3r039-secret
    labels:
      app.kubernetes.io/component: inst1-redis333-5vbuk3r039
      app.kubernetes.io/instance: inst1-redis333-5vbuk3r039
      app.kubernetes.io/name: inst1-jijqqbzv0a
      app.kubernetes.io/version: 0.0.1
    name: inst1-redis333-5vbuk3r039
    nodeHardware:
      cpuInfo:
        architectures:
        - arm64
    nodeType: ServiceNode
    replicas:
      max: 1
      min: 1
      setType: Simple
