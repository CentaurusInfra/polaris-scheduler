kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.22
  name: customstreamsightslomappings.slo.k8s.rainbow-h2020.eu
spec:
  group: slo.k8s.rainbow-h2020.eu
  names:
    kind: CustomStreamSightSloMapping
    listKind: CustomStreamSightSloMappingList
    singular: customstreamsightslomapping
    plural: customstreamsightslomappings
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            Represents the SLO mapping for the CustomStreamSight SLO, which
            allows specifying custom StreamSight queries in its configuration.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - elasticityStrategy
                - sloConfig
                - targetRef
              description: The spec type for the CustomStreamSight SLO.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                elasticityStrategy:
                  type: object
                  required:
                    - kind
                    - apiVersion
                  description: Identifies an elasticity strategy kind/type.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                sloConfig:
                  type: object
                  properties:
                    streams:
                      type: object
                      additionalProperties:
                        type: string
                      description: >-
                        Defines the StreamSight streams that should be available
                        for the insights.


                        Each key in this object defines the name of the stream
                        and its value is the definition of the stream.


                        Within each stream definition, there are two
                        placeholders that will be filled in by the SLO
                        controller:

                        - `${namespace}`: The namespace, where the SloMapping is
                        deployed.

                        - `${podName}`: A wildcard expression with the prefix of
                        the pod names.
                    insights:
                      type: object
                      additionalProperties:
                        type: string
                      description: >-
                        Defines the insights that can be used in the
                        `targetState` below.


                        Each key in this object defines the name of an insight
                        and its value specifies the query for it.
                    targetState:
                      type: object
                      properties:
                        conjuncts:
                          type: array
                          items:
                            type: object
                            properties:
                              disjuncts:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    insight:
                                      type: string
                                      description: >-
                                        The insight, for which the state is
                                        defined.
                                    targetValue:
                                      type: number
                                      description: >-
                                        The desired target value for the
                                        insight.


                                        By default we assume that a lower metric
                                        value is "better", e.g., for network
                                        latency a lower value is considered
                                        better than a higher value. In this
                                        case, the following scaling approach is
                                        used:

                                        - Above `targetValue + tolerance` we
                                        scale up/out.

                                        - Below `targetValue - tolerance` we
                                        scale down/in


                                        This behavior can be inverted by setting
                                        the `higherIsBetter` property to `true`.
                                      minimum: 1
                                    tolerance:
                                      type: number
                                      description: A tolerance around the target value.
                                    higherIsBetter:
                                      type: boolean
                                      description: >-
                                        (optional) If `true`, then a higher
                                        metric value is considered "better" and,
                                        thus, the above/below rules of
                                        `targetValue` and `tolerance` are
                                        inverted.
                                  required:
                                    - insight
                                    - targetValue
                                    - tolerance
                                  additionalProperties: false
                                  description: >-
                                    Defines the desired target state of a
                                    StreamSight insight's value.
                                description: >-
                                  The states, which should be evaluated and
                                  combined with an OR operator.
                            required:
                              - disjuncts
                            additionalProperties: false
                            description: >-
                              Defines a set of  {@link  InsightTargetState }
                              objects, which are combined with an OR operator.
                          description: >-
                            The disjunction clauses, which are evaluated and
                            combined with an AND operator.
                      required:
                        - conjuncts
                      description: >-
                        Defines an expression about StreamSight insights in CNF
                        (Conjunctive Normal Form).


                        The `conjuncts` property contains a list of
                        disjunctions, which are evaluated and combined with an
                        AND operator.


                        Kubernetes CRDs do not seem to support recursive
                        definitions (see
                        https://github.com/kubernetes/kubernetes/issues/91669),
                        which means that we cannot support arbitrary nesting of
                        AND and OR expression objects. Thus, we have decided to
                        require insight expression to be defined in a normalized
                        form, i.e., CNF.
                    elasticityStrategyTolerance:
                      type: integer
                      description: >-
                        (optional) Specifies the tolerance around 100%, within
                        which no scaling will be performed.


                        For example, if tolerance is `10`, no scaling will be
                        performed as long as the SloCompliance is between `90`
                        and `110`.
                      default: 10
                      format: int64
                  required:
                    - streams
                    - insights
                    - targetState
                  description: >-
                    Represents the configuration options of the
                    CustomStreamSight SLO, which allows specifying custom
                    StreamSight queries.
                staticElasticityStrategyConfig:
                  type: object
                  description: Convenience type for a map object with string keys.
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

apiVersion: v1
kind: Namespace
metadata:
  name: polaris
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: custom-stream-sight-slo-controller
  namespace: polaris
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # ClusterRoles are not namespaced
  name: custom-stream-sight-slo-controller
rules:
  # Allow reading all SLO mappings
  # - apiGroups:
  #   - slo.polaris-slo-cloud.github.io
  #   resources:
  #   - "*"
  #   verbs:
  #   - get
  #   - watch
  #   - list

  # Allow reading supported SLO mappings
  - apiGroups:
      - slo.polaris-slo-cloud.github.io
    resources:
      - customstreamsightslomappings
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - slo.polaris-slo-cloud.github.io
    resources:
      - customstreamsightslomappings/status
    verbs:
      - get

  # Allow writing all elasticity strategies
  - apiGroups:
      - elasticity.polaris-slo-cloud.github.io
    resources:
      - "*"
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
# Optionally, we could create a RoleBinding and to scope the permissions to a specific namespace
metadata:
  name: control-customstreamsightslomappings-slos
subjects:
  - kind: ServiceAccount
    name: custom-stream-sight-slo-controller
    namespace: polaris
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-stream-sight-slo-controller

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: custom-stream-sight-slo-controller
    tier: control-plane
  name: custom-stream-sight-slo-controller
  namespace: polaris
spec:
  selector:
    matchLabels:
      component: custom-stream-sight-slo-controller
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: custom-stream-sight-slo-controller
        tier: control-plane
    spec:
      serviceAccountName: custom-stream-sight-slo-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      tolerations:
        # Ensure that the controller can be scheduled on master nodes.
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - image: polarissloc/custom-stream-sight-slo-controller:0.0.1
          name: slo-controller
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
          env:
            # The hostname and port of the StreamSight service:
            - name: STREAM_SIGHT_HOST
              value: localhost
            - name: STREAM_SIGHT_PORT
              value: "5000"
            # The hostname and port of the RAINBOW Distributed Data Storage service:
            - name: RAINBOW_STORAGE_HOST
              value: localhost
            - name: RAINBOW_STORAGE_PORT
              value: "50000"
            # SLO Control Loop interval in milliseconds.
            - name: SLO_CONTROL_LOOP_INTERVAL_MSEC
              value: "10000"
            # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599)
            - name: KUBERNETES_SERVICE_HOST
              value: kubernetes.default.svc
          securityContext:
            privileged: false

---

