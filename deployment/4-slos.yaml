kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: customstreamsightslomappings.slo.k8s.rainbow-h2020.eu
spec:
  group: slo.k8s.rainbow-h2020.eu
  names:
    kind: CustomStreamSightSloMapping
    listKind: CustomStreamSightSloMappingList
    singular: customstreamsightslomapping
    plural: customstreamsightslomappings
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            Represents the SLO mapping for the CustomStreamSight SLO, which
            allows specifying custom StreamSight queries in its configuration.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - elasticityStrategy
                - sloConfig
                - targetRef
              description: The spec type for the CustomStreamSight SLO.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                elasticityStrategy:
                  type: object
                  required:
                    - kind
                    - apiVersion
                  description: Identifies an elasticity strategy kind/type.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                sloConfig:
                  type: object
                  properties:
                    streams:
                      type: object
                      additionalProperties:
                        type: string
                      description: >-
                        Defines the StreamSight streams that should be available
                        for the insights.


                        Each key in this object defines the name of the stream
                        and its value is the definition of the stream.


                        Within each stream definition, there are two
                        placeholders that will be filled in by the SLO
                        controller:

                        - `${namespace}`: The namespace, where the SloMapping is
                        deployed.

                        - `${podName}`: A wildcard expression with the prefix of
                        the pod names.
                    insights:
                      type: object
                      additionalProperties:
                        type: string
                      description: >-
                        Defines the insights that can be used in the
                        `targetState` below.


                        Each key in this object defines the name of an insight
                        and its value specifies the query for it.
                    targetState:
                      type: object
                      properties:
                        conjuncts:
                          type: array
                          items:
                            type: object
                            properties:
                              disjuncts:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    insight:
                                      type: string
                                      description: >-
                                        The insight, for which the state is
                                        defined.
                                    targetValue:
                                      type: integer
                                      description: >-
                                        The desired target value for the
                                        insight.


                                        By default we assume that a lower metric
                                        value is "better", e.g., for network
                                        latency a lower value is considered
                                        better than a higher value. In this
                                        case, the following scaling approach is
                                        used:

                                        - Above `targetValue + tolerance` we
                                        scale up/out.

                                        - Below `targetValue - tolerance` we
                                        scale down/in


                                        This behavior can be inverted by setting
                                        the `higherIsBetter` property to `true`.
                                      minimum: 1
                                      format: int64
                                    tolerance:
                                      type: integer
                                      description: A tolerance around the target value.
                                      format: int64
                                    higherIsBetter:
                                      type: boolean
                                      description: >-
                                        (optional) If `true`, then a higher
                                        metric value is considered "better" and,
                                        thus, the above/below rules of
                                        `targetValue` and `tolerance` are
                                        inverted.
                                  required:
                                    - insight
                                    - targetValue
                                    - tolerance
                                  description: >-
                                    Defines the desired target state of a
                                    StreamSight insight's value.
                                description: >-
                                  The states, which should be evaluated and
                                  combined with an OR operator.
                            required:
                              - disjuncts
                            description: >-
                              Defines a set of  {@link  InsightTargetState } 
                              objects, which are combined with an OR operator.
                          description: >-
                            The disjunction clauses, which are evaluated and
                            combined with an AND operator.
                      required:
                        - conjuncts
                      description: >-
                        Defines an expression about StreamSight insights in CNF
                        (Conjunctive Normal Form).


                        The `conjuncts` property contains a list of
                        disjunctions, which are evaluated and combined with an
                        AND operator.


                        Kubernetes CRDs do not seem to support recursive
                        definitions (see
                        https://github.com/kubernetes/kubernetes/issues/91669),
                        which means that we cannot support arbitrary nesting of
                        AND and OR expression objects. Thus, we have decided to
                        require insight expression to be defined in a normalized
                        form, i.e., CNF.
                    elasticityStrategyTolerance:
                      type: integer
                      description: >-
                        (optional) Specifies the tolerance around 100%, within
                        which no scaling will be performed.


                        For example, if tolerance is `10`, no scaling will be
                        performed as long as the SloCompliance is between `90`
                        and `110`.
                      default: 10
                      format: int64
                  required:
                    - streams
                    - insights
                    - targetState
                  description: >-
                    Represents the configuration options of the
                    CustomStreamSight SLO, which allows specifying custom
                    StreamSight queries.
                staticElasticityStrategyConfig:
                  type: object
                  additionalProperties: true
                  description: >-
                    Any static configuration parameters, which are unknown to
                    the SLO, but which may be required to configure the chosen
                    kind of elasticity strategy should be specified here. They
                    will be copied over into the spec of the elasticity
                    strategy.


                    For example, suppose the SLO knows only about the parameters
                    in `SloCompliance`, but you want to use an elasticity
                    strategy that requires an additional parameter, e.g.,
                    `maxReplicas`. This can be configured when instantiating the
                    SloMapping:


                    ``` new MySloMapping({      elasticityStrategy: new
                    ElasticityStrategyKind({          kind:
                    'my-special-elasticity-strategy-kind',          ...     
                    }),      ...,      staticElasticityStrategyConfig:
                    {          // Anything in here will be copied over to the
                    `staticConfig` property of the elasticity strategy
                    spec.          maxReplicas: 100,      }, }); ```
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: migrationelasticitystrategies.elasticity.k8s.rainbow-h2020.eu
spec:
  group: elasticity.k8s.rainbow-h2020.eu
  names:
    kind: MigrationElasticityStrategy
    listKind: MigrationElasticityStrategyList
    singular: migrationelasticitystrategy
    plural: migrationelasticitystrategies
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            Defines the `MigrationElasticityStrategy`.


            See  {@link  MigrationElasticityStrategyConfig }  for details on
            this elasticity strategy.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - targetRef
                - sloOutputParams
              description: >-
                A generic class that is used to set up specs for an elasticity
                strategy.


                A concrete `ElasticityStrategy` may use
                `ElasticityStrategySpec<T>` directly as the type for its spec,
                or a class derived from this one, if, e.g., the transformation
                needs to be customized.


                Parameters that are defined by the output of the SLO are stored
                in `sloOutputParams`. The type of this property determines if an
                elasticity strategy is compatible with a certain SLO.


                `staticConfig` should be used for other configuration data,
                which is not changed by the SLO.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                sloOutputParams:
                  type: object
                  properties:
                    currSloCompliancePercentage:
                      type: integer
                      description: >-
                        Specifies how much the current state of the system
                        complies with the SLO.


                        This value must be specified as an integer, e.g., `50`
                        meaning 50%, `100` meaning 100%, `200` meaning 200%.


                        If this value is `100`, the SLO is met exactly and no
                        scaling action is required.


                        If this value is greater than `100`, the SLO is violated
                        and scaling out/up is required.


                        If this value is less than `100`, the system is
                        performing better than the SLO demands and scaling
                        in/down will be performed.
                      format: int64
                    tolerance:
                      type: integer
                      description: >-
                        Specifies the tolerance around 100%, within which no
                        scaling will be performed.


                        For example, if tolerance is `10`, no scaling will be
                        performed as long as `currSloCompliancePercentage` is
                        between `90` and `110`.
                      format: int64
                  required:
                    - currSloCompliancePercentage
                  description: >-
                    Defines a generic mechanism for specifying how much an SLO
                    is being violated or outperformed.
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                staticConfig:
                  type: object
                  properties:
                    baseAffinity:
                      type: object
                      properties:
                        nodeAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: object
                              properties:
                                nodeSelectorTerms:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      matchExpressions:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's labels.
                                      matchFields:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's fields.
                                    description: >-
                                      Specifies a single term for node
                                      selection. A null or empty node selector
                                      term matches no objects. The requirements
                                      of them are ANDed.
                                  description: >-
                                    A list of node selector terms. The terms are
                                    ORed.
                              required:
                                - nodeSelectorTerms
                              description: Used for selecting a node.
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                properties:
                                  weight:
                                    type: integer
                                    description: >-
                                      Weight associated with matching the
                                      corresponding nodeSelectorTerm.
                                    minimum: 1
                                    maximum: 100
                                    format: int64
                                  preference:
                                    type: object
                                    properties:
                                      matchExpressions:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's labels.
                                      matchFields:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's fields.
                                    description: >-
                                      Specifies a single term for node
                                      selection. A null or empty node selector
                                      term matches no objects. The requirements
                                      of them are ANDed.
                                required:
                                  - weight
                                  - preference
                        podAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                        podAntiAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                    alternativeAffinity:
                      type: object
                      properties:
                        nodeAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: object
                              properties:
                                nodeSelectorTerms:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      matchExpressions:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's labels.
                                      matchFields:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's fields.
                                    description: >-
                                      Specifies a single term for node
                                      selection. A null or empty node selector
                                      term matches no objects. The requirements
                                      of them are ANDed.
                                  description: >-
                                    A list of node selector terms. The terms are
                                    ORed.
                              required:
                                - nodeSelectorTerms
                              description: Used for selecting a node.
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                properties:
                                  weight:
                                    type: integer
                                    description: >-
                                      Weight associated with matching the
                                      corresponding nodeSelectorTerm.
                                    minimum: 1
                                    maximum: 100
                                    format: int64
                                  preference:
                                    type: object
                                    properties:
                                      matchExpressions:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's labels.
                                      matchFields:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                              description: >-
                                                The label key that the selector applies
                                                to.
                                            operator:
                                              type: string
                                              enum:
                                                - In
                                                - NotIn
                                                - Exists
                                                - DoesNotExist
                                                - Gt
                                                - Lt
                                              description: >-
                                                Represents a key's relationship to a set
                                                of values.
                                            values:
                                              type: array
                                              items:
                                                type: string
                                              description: >-
                                                An array of string values. If the
                                                operator is In or NotIn the values array
                                                must be non-empty. If the operator is
                                                Exists or DoesNotExist, the values array
                                                must be empty. If the operator is Gt or
                                                Lt, the values array must have a single
                                                element, which will be interpreted as an
                                                integer.
                                          required:
                                            - key
                                            - operator
                                        description: >-
                                          A list of node selector requirements by
                                          node's fields.
                                    description: >-
                                      Specifies a single term for node
                                      selection. A null or empty node selector
                                      term matches no objects. The requirements
                                      of them are ANDed.
                                required:
                                  - weight
                                  - preference
                        podAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                        podAntiAffinity:
                          type: object
                          properties:
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              items:
                                type: object
                                additionalProperties: true
                  x-kubernetes-preserve-unknown-fields: true
                  description: >-
                    Configuration options for  {@link
                    MigrationElasticityStrategy } .


                    This elasticity strategy allows moving the pods of a
                    workload between two types of nodes, based on the SLO
                    compliance. This can be used, e.g., to normally run a
                    workload on nodes of type A, but when a certain condition is
                    true, move it to nodes of type B.


                    The node type selection is handled through affinities:

                    - `baseAffinity` is applied when the SLO Compliance is below
                    `100 - tolerance`.

                    - `alternativeAffinity` is applied when the SLO Compliance
                    is above `100 + tolerance`.


                    If the SLO Compliance is between `100 - tolerance` and `100
                    + tolerance`, no change to the current situation is made.
                    The `tolerance` refers to the `tolerance` property of the
                    `SloCompliance` object.
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

apiVersion: v1
kind: Namespace
metadata:
  name: rainbow-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: custom-stream-sight-slo-controller
  namespace: rainbow-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # ClusterRoles are not namespaced
  name: custom-stream-sight-slo-controller
rules:
  # Allow reading all SLO mappings
  # - apiGroups:
  #   - slo.polaris-slo-cloud.github.io
  #   resources:
  #   - "*"
  #   verbs:
  #   - get
  #   - watch
  #   - list

  # Allow reading supported SLO mappings
  - apiGroups:
      - slo.k8s.rainbow-h2020.eu
    resources:
      - customstreamsightslomappings
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - slo.k8s.rainbow-h2020.eu
    resources:
      - customstreamsightslomappings/status
    verbs:
      - get

  # Allow writing all elasticity strategies
  - apiGroups:
      - elasticity.polaris-slo-cloud.github.io
    resources:
      - "*"
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - elasticity.k8s.rainbow-h2020.eu
    resources:
      - "*"
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
# Optionally, we could create a RoleBinding and to scope the permissions to a specific namespace
metadata:
  name: control-customstreamsightslomappings-slos
subjects:
  - kind: ServiceAccount
    name: custom-stream-sight-slo-controller
    namespace: rainbow-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-stream-sight-slo-controller

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: custom-stream-sight-slo-controller
    tier: control-plane
  name: custom-stream-sight-slo-controller
  namespace: rainbow-system
spec:
  selector:
    matchLabels:
      component: custom-stream-sight-slo-controller
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: custom-stream-sight-slo-controller
        tier: control-plane
    spec:
      serviceAccountName: custom-stream-sight-slo-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      tolerations:
        # Ensure that the controller can be scheduled on master nodes.
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      hostNetwork: true
      containers:
        - image: registry.gitlab.com/rainbow-project1/rainbow-integration/custom-stream-sight-slo-controller:0.0.13
          name: slo-controller
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
          env:
            # The hostname and port of the StreamSight service and its auth token:
            - name: STREAM_SIGHT_HOST
              value: localhost
            - name: STREAM_SIGHT_PORT
              value: "5000"
            - name: STREAM_SIGHT_AUTH_TOKEN
              value: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZjZjNTM5MDQwMzFjNzAwMTkzMjAwYzQiLCJuYW1lIjoiU2F2dmFzIiwic3VybmFtZSI6Ik5pa2lmb3JvdSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNjIzMjQxNTcwLCJleHAiOjE2MjMyNDIxNzB9.HEMgQAPnt4oVm5McjL1k14Ze9WrDP_5BclaG_QjUouY"
            # The hostname and port of the RAINBOW Distributed Data Storage service and its auth token:
            - name: RAINBOW_STORAGE_HOST
              value: localhost
            - name: RAINBOW_STORAGE_PORT
              value: "50000"
            - name: RAINBOW_STORAGE_AUTH_TOKEN
              value: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZjZjNTM5MDQwMzFjNzAwMTkzMjAwYzQiLCJuYW1lIjoiU2F2dmFzIiwic3VybmFtZSI6Ik5pa2lmb3JvdSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNjIzMjQxNTcwLCJleHAiOjE2MjMyNDIxNzB9.HEMgQAPnt4oVm5McjL1k14Ze9WrDP_5BclaG_QjUouY"
            # SLO Control Loop interval in milliseconds.
            - name: SLO_CONTROL_LOOP_INTERVAL_MSEC
              value: "10000"
            # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599). Cannot be used in hostNetwork mode.
            # - name: KUBERNETES_SERVICE_HOST
            #   value: kubernetes.default.svc
          securityContext:
            privileged: false
      imagePullSecrets:
        - name: regcred

---

apiVersion: v1
kind: Namespace
metadata:
    name: polaris
---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: migration-estrat-controller
    namespace: polaris
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    # ClusterRoles are not namespaced
    name: migration-estrat-controller
rules:
    # Allow reading all Elasticity Strategy types
    # - apiGroups:
    #   - elasticity.k8s.rainbow-h2020.eu
    #   resources:
    #   - "*"
    #   verbs:
    #   - get
    #   - watch
    #   - list

    # Allow reading supported Elasticity Strategy types
    - apiGroups:
          - elasticity.k8s.rainbow-h2020.eu
      resources:
          - migrationelasticitystrategies
      verbs:
          - get
          - watch
          - list
    - apiGroups:
          - elasticity.k8s.rainbow-h2020.eu
      resources:
          - migrationelasticitystrategies/status
      verbs:
          - get

# Allow reading and updating all Deployments, StatefulSets, ReplicaSets, and DaemonSets
    - apiGroups:
      - 'apps'
      resources:
      - deployments
      - statefulsets
      - replicasets
      - daemonsets
      verbs:
      - get
      - list
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
# Optionally, we could create a RoleBinding and to scope the permissions to a specific namespace
metadata:
    name: control-migrationelasticitystrategies
subjects:
    - kind: ServiceAccount
      name: migration-estrat-controller
      namespace: polaris
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: migration-estrat-controller

---

apiVersion: apps/v1
kind: Deployment
metadata:
    labels:
        component: migration-estrat-controller
        tier: control-plane
    name: migration-estrat-controller
    namespace: polaris
spec:
    selector:
        matchLabels:
            component: migration-estrat-controller
            tier: control-plane
    replicas: 1
    template:
        metadata:
            labels:
                component: migration-estrat-controller
                tier: control-plane
        spec:
            serviceAccountName: migration-estrat-controller
            affinity:
                nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                            - matchExpressions:
                                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                                  - key: kubernetes.io/arch
                                    operator: In
                                    values:
                                        - amd64
            tolerations:
                # Ensure that the controller can be scheduled on master nodes.
                - key: node-role.kubernetes.io/master
                  operator: Exists
                  effect: NoSchedule
            containers:
                - image: polarissloc/migration-estrat-controller:0.0.1
                  name: elasticity-controller
                  resources:
                      limits:
                          cpu: 1000m
                          memory: 1Gi
                  securityContext:
                      privileged: false
                  env:
                      # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599)
                      - name: KUBERNETES_SERVICE_HOST
                        value: kubernetes.default.svc

---

